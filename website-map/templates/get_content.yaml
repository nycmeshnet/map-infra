apiVersion: v1
kind: ConfigMap
metadata:
  name: get-content
  namespace: {{ .Values.app_namespace }}
data:
  get_content.py: |
    import sys
    import time
    import jwt
    import requests
    import os

    pem = "/secrets/gh"
    client_id = os.environ["GH_CLIENT_ID"]
    install_id = os.environ["GH_INSTALL_ID"]
    owner = "nycmeshnet"
    repo = "nycmesh.net"
    branch = "master"
    workflow_name = "Build distribution artifact for map.nycmesh.net"
    artifact_path = "/content/new_content.zip"

    def get_jwt():
        with open(pem, 'rb') as pem_file:
            signing_key = pem_file.read()

        payload = {
            'iat': int(time.time()),
            'exp': int(time.time()) + 600,
            'iss': client_id
        }

        encoded_jwt = jwt.encode(payload, signing_key, algorithm='RS256')
        return encoded_jwt

    def get_install_token():
        token = get_jwt()

        url = f"https://api.github.com/app/installations/{install_id}/access_tokens"
        res = requests.post(url, headers={
            "Accept": "application/vnd.github+json",
            "Authorization": f"Bearer {token}",
            "X-GitHub-Api-Version": "2022-11-28",
        })
        return res.json()["token"]

    def select_artifact():
        token = get_install_token()
        url = f"https://api.github.com/repos/{owner}/{repo}/actions/runs?branch={branch}"
        res = requests.get(url, headers={
            "Accept": "application/vnd.github+json",
            "Authorization": f"Bearer {token}",
            "X-GitHub-Api-Version": "2022-11-28",
        })
        latest_workflow_id = None
        for workflow_run in res.json()["workflow_runs"]:
            if workflow_run["name"] == workflow_name:
                latest_workflow_id = workflow_run["id"]
                break

        if latest_workflow_id is None:
            print("Did not find workflow")
            exit(1)

        # Get artifacts
        url = f"https://api.github.com/repos/{owner}/{repo}/actions/runs/{latest_workflow_id}/artifacts"
        res = requests.get(url, headers={
            "Accept": "application/vnd.github+json",
            "Authorization": f"Bearer {token}",
            "X-GitHub-Api-Version": "2022-11-28",
        })
        artifact_name = res.json()["artifacts"][0]["name"]
        if artifact_name != "map-site-build":
            print(f"Unexpected artifact name {artifact_name}")
            exit(1)
        artifact_download_url = res.json()["artifacts"][0]["archive_download_url"]
        with requests.get(artifact_download_url, allow_redirects=True, stream=True, headers={
            "Accept": "application/vnd.github+json",
            "Authorization": f"Bearer {token}",
            "X-GitHub-Api-Version": "2022-11-28",
        }) as res:
            with open(artifact_path, "wb") as fd:
                for chunk in res.iter_content(chunk_size=2048):
                    fd.write(chunk)

    if __name__ == "__main__":
        select_artifact()
